// —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä

/*
 * –ö–ª–∏–µ–Ω—Ç –ø–æ—Å—ã–ª–∞–µ—Ç —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—É
 *
 * queryIndex - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ (—Å–µ—Ä–≤–µ—Ä –µ–≥–æ —Ö—Ä–∞–Ω–∏—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º)
 */
export interface MessageToServer {
  type: string;
  queryIndex: number;
  payload?: any;
}

export interface TBaseResultJob {
  type: string;
}

// –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
export type ServerResponce<T extends TBaseResultJob> = {
  type: string; // –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç worker
  queryIndex: number; // —á–∏—Å–ª–æ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  // –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ worker –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç resultJob –≤–∫–ª—é—á–∞—è type, type –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –Ω–∞—á–∞–ª–æ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  resultJob: Omit<T, 'type'>; // —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã - –≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è any
};

// –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º
export type ServerResponceClient<T> = {
  type: string; // –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç worker
  queryIndex: number; // —á–∏—Å–ª–æ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  resultJob: T; // —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã - –≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è any
};

/*
 * –í–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–µ—Ä —Ö—Ä–∞–Ω–∏—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *
 * key - IP:PORT –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–µ–ª –≤—ã–∑–æ–≤
 * type - –≤–∏–¥ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É, –Ω–∞–ø—Ä–∏–º–µ—Ä getProxy, returnProxy –∏ —Ç–¥
 * queryIndex - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–∫–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –≤–µ–¥–µ—Ç –µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
 * payload - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫—É—é —Ç–æ –µ—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 * errorCount - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞
 */
export interface Demand extends MessageToServer {
  key: string;
  errorCount: number;
  inProcessState: boolean; // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ä–∞–±–æ—Ç—É
}

/*
 * executor –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {type:string} –∞ —Ç–∞–∫–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã
 *
 * type - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
 * –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
 */
export type JobWorker<TresultJob extends TBaseResultJob> = {
  type: string;
  executor: Executor<TresultJob>;
};

export type Executor<TresultJob extends TBaseResultJob> = (demand: GetNextClientJob) => Promise<TresultJob>;

export type QueueOneTypeProcessing<TresultJob extends TBaseResultJob> = {
  demandQueIsProcessing: boolean; // –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
  type: string;
  runner: Executor<TresultJob>;
};

/*
 * –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã worker –∏–∑–≤–µ—â–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ —Å–¥–µ–ª–∞–Ω–∞ –ø—É—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 * T - —Ç–∏–ø –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Å–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã worker
 */
export type EventJobDoneArgs<T> = { demand: GetNextClientJob; resultJob: T };

/*
 * GetNextClientJob - —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
 *
 * index - –∏–Ω–¥–µ–∫—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∞—Å—Å–∏–≤–µ clientQueues
 */
export type GetNextClientJob = { index: number; queItem: Demand };

// —Å–ª—É–∂–µ–±–Ω—ã–π —Ç–∏–ø –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ –∫–ª–∞—Å—Å–∞
// eslint-disable-next-line @typescript-eslint/ban-types
export type TypeOfClassMethod<T, M extends keyof T> = T[M] extends Function ? T[M] : never;

export interface ErrorNet extends Error {
  code: string;
}

// –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Eventemitter —Å–µ—Ä–≤–µ—Ä–∞
export const serverJobRecieved = 'SERVER_JOB_RECIEVED';
export const workerJobDone = 'WORKER_JOB_DONE';

// –º–∞–∫—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫ –∑–∞–¥–∞–Ω–∏—è
export const MAX_JOB_RETRYES = 5;

// —Å—Ç—Ä–æ–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
export const MESSAGE_SEPARATOR = 'ü¶Ä';

// –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
export const CLIENT_WAIT_FOR_SERVER_ANSWER = 10_000;
